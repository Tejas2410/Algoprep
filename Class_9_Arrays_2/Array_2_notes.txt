
								Array 2
								~~~~~~~
Ex. 1 -> Reverse Part of Array from Start Index to End Index
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import java.util.Scanner;

public class Program1 {
    public static void reverse(int[] arr , int low , int high) {
        while(low < high) {
            int temp = arr[low];
            arr[low] = arr[high];
            arr[high] = temp;
            low++;
            high--;
        }
    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int[] arr = new int[n];
        for(int i = 0; i < n ; i++) {
            arr[i] = scn.nextInt();
        }
        int low = scn.nextInt();
        int high = scn.nextInt();

        reverse(arr , low , high);
        for(int i = 0; i < n ; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}

i/p
5
1 2 3 4 5
1 3

o/p
1 4 3 2 5 
----------------------------------------------------------------------------------

Ex. 2 -> Rotate Array
~~~~~~~~~~~~~~~~~~~~~

import java.util.Arrays;
import java.util.Scanner;

public class Rotate_Array_02 {
    public static void reverse(int[] arr , int low , int high) {
        while(low < high) {
            int temp = arr[low];
            arr[low] = arr[high];
            arr[high] = temp;
            low++;
            high--;
        }
    }
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int[] arr = new int[n];
        for(int i = 0; i < n ; i++) {
            arr[i] = scn.nextInt();
        }

        int k = scn.nextInt();

        k = k  % n;
        if( k < 0 ) {
            k = k + n;
        }
        reverse(arr , 0 , n - 1);
        reverse(arr , 0 , k - 1);
        reverse(arr , k , n - 1);

        //System.out.println(Arrays.toString(arr));
        for(int i = 0; i < n ; i++) {
            System.out.print(arr[i] + " ");
        }

    }
}

i/p
5
1 2 3 4 5
2

o/p
4 5 1 2 3 
-----------------------------------------------------------------------------------

Ex. 3 : count total no. of elements in the array having atleast 1 element greater than itself

// count max and subtract with array length

import java.util.Scanner;

public class Count_greater_03 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int[] arr = new int[n];
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < n ; i++) {
            arr[i] = scn.nextInt();
            if(arr[i] > max) {
                max = arr[i];
            }
        }
        int count = 0;
        for(int i = 0; i < n ; i++) {
            if(arr[i] == max) {
                count++;
            }
        }
        System.out.println(arr.length - count);


    }
}

i/p
5
1 2 5 4 5

o/p
3

----------------------------------------------------------------------------------
Refer -> Image 1

Ex.4 -> Given n length array "arr" and an integer k, Check if there exists a pair
(i,j) such that arr[i]+arr[j] == k and i!=j . Print true if there is a valid pair present else print false.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import java.util.Scanner;

public class Program4 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();

        int[] arr = new int[n];

        for(int i = 0; i < n ; i++) {
            arr[i] = scn.nextInt();
        }
        int k = scn.nextInt();
        boolean flag = false;
        for(int i = 0; i < n - 1; i++) {
            for(int j = i + 1 ; j < n ; j++) {
                if(arr[i] + arr[j] == k){
                    flag = true;
                }
            }
        }
        System.out.println(flag);

    }
}

i/p
5
1 2 3 4 5
9

o/p
true

i/p
5
1 2 3 4 5
10

o/p
false

--------------------------------------------------------------------------------------------------------------------------

HW 1 : Given n length array "arr". Find the pair with maximum value of arr[i] - arr[j]. You need to print max value of (arr[i] - arr[j]) possible and not the (i,j) itself.

Note: Doing it by checking all the possible pairs. Works but can you do something smart?

import java.util.Scanner;
import java.lang.*;

public class Found_Arrays2_Max_Difference_1_HW_05 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i = 0 ; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(arr[i] != arr[j] && arr[i] - arr[j] > max){
                    max = arr[i] - arr[j];
                }
            }
        }
        System.out.println(max);
    }
}

------------------------------------------------------------------------------------------------------------------------------
 HW 2 : Given n length array "arr". Find (i,j) with maximum value of arr[i] - arr[j] + i - j.
You need to print max value of (arr[i] - arr[j] + i - j) possible and not the (i,j) itself.

Note: Doing it by checking all the possible pairs. Works but can you do something smart?

import java.util.Scanner;

public class Found_Arrays2_Max_Difference_2_HW_06 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i = 0 ; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(arr[i] != arr[j] && (arr[i] - arr[j] + i - j) > max){
                    max = arr[i] - arr[j] + i - j;
                }
            }
        }
        System.out.println(max);
    }
}
-------------------------------------------------------------------------------------------------------------------------------

 HW 3 : Given n length array "arr". Find (i,j) with maximum value of arr[i] - arr[j] + j - i. 
 You need to print max value of (arr[i] - arr[j] + j - i) possible and not the (i,j) itself.

Note: Doing it by checking all the possible pairs. Works but can you do something smart?

import java.util.Scanner;

public class Found_Arrays2_Max_Difference_3_HW_07 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i = 0 ; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(arr[i] != arr[j] && (arr[i] - arr[j] + j - i) > max){
                    max = arr[i] - arr[j] + j - i;
                }
            }
        }
        System.out.println(max);
    }
}


-------------------------------------------------------------------------------------------------------------------------------

HW 4 : Given n length array "arr". Find (i,j) with maximum value of (abs(arr[i] - arr[j]) + i - j). You need to print max value of (abs(arr[i] - arr[j]) + i - j) possible and not the (i,j) itself.

Note 1: abs represents the postive part only. ex: abs(8) = 8 and abs(-8) = 8.

Note 2: Doing it by checking all the possible pairs. Works but can you do something smart?


import java.util.Scanner;

public class Found_Arrays2_Max_Difference_4_HW_08 {
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] arr = new int[n];
        for(int i = 0 ; i < n; i++) {
            arr[i] = scn.nextInt();
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < n ; j++) {
                if(arr[i] != arr[j] && Math.abs(arr[i] - arr[j]) + j - i > max){
                    max = Math.abs(arr[i] - arr[j]) + j - i ;
                }
            }
        }
        System.out.println(max);
    }
}

--------------------------------------------------------------------------------------------------------------------------------